name: Dev-Azure

on:


  workflow_dispatch:
  
  
env:
  ## Sets environment variables
  GITHUB_PROJECT_URL: "https://github.com/danatrace/pacman/projects/1" 
  DOCKER_REPO_URL: "https://hub.docker.com/repository/docker/danatrace/pacman"
  DT_URL: "https://ozw11698.live.dynatrace.com"
  DT_MZ_ID: "2462787389709860009"
  DT_DEV_DB_ID: "76196020-e322-42c2-bc82-f7868171247e"
  DT_STAGING_DB_ID: "e061a600-0a14-423f-a163-557d402b0bbe"
  DT_PROD_DB_ID: "9d789d18-f896-4cb5-bb34-bb1db6300ee0"
  DT_PRE_DB_ID: "478904d7-a456-4c49-9ad2-15da8ec7bb66"
  DOCKER_TAG: "danatrace/pacman"
  
  
  
  
 
jobs:

    

  Open-Tracking-Issue:
       
       runs-on: dynatracedemo
       environment:
          name: dev
          url: ${{env.GITHUB_PROJECT_URL}}           
  
        
       outputs:
            output1: ${{ steps.create-issue.outputs.number }}
            output2: ${{ steps.set_ip.outputs.publicip }}
       steps:
 
       - name: Set Release Version Variable
         id: set_ip
         run: |
               export build_version=${{ github.run_number }}
               echo "build_version=$build_version" >> "$GITHUB_ENV"
               export publicip=$(curl http://checkip.amazonaws.com)               
               echo "::set-output name=publicip::$publicip"
        
 
  Build-Push-Container:
    runs-on: dynatracedemo
    environment:
          name: dev
    needs: Open-Tracking-Issue
     
    steps:
    - uses: actions/checkout@v2
      with:
           ref: 'dev'
    - name: Build and Deploy Docker image
      run: |
        docker stop simplenodeservice || true
        docker rm simplenodeservice || true
        builid=${{ github.run_number }}
        ls
        pwd   
        docker build --build-arg BUILD_NUMBER=${{ github.run_number }} --tag ${{ env.DOCKER_TAG }}:${{ github.run_number }} .
        docker run --name simplenodeservice -d -p 8080:8080 ${{ env.DOCKER_TAG }}:${{ github.run_number }}
        docker ps
        curl -v telnet://localhost:8080
    - name: Login Docker Hub
      env:
        dockertoken: ${{ secrets.dockerhub }} 

      uses: docker/login-action@v1.10.0
      with:
        username: ${{secrets.DOCKER_USER}}
        password: ${{ secrets.dockerhub }} 
        logout: true

    - name: Push Container
      run: |
        docker push ${{ env.DOCKER_TAG }}:${{ github.run_number }}
        docker stop simplenodeservice
        docker rm simplenodeservice 
        
                
  Deploy-Application:
    runs-on: dynatracedemo
    environment:
      name: dev
      url: "http://${{ needs.Open-Tracking-Issue.outputs.output2 }}:8000/"
    needs: [Build-Push-Container, Open-Tracking-Issue]
     
    steps:
    - name: Deploy Application to Dev NS
      env:
        builid: ${{ github.run_number }}
      run: |
        export ct_version="${{ github.run_number }}"
        export bd_version="${{ github.run_number }}"
        export dockertag="${{env.DOCKER_TAG}}"
        rm -f final_dev.yml
        rm -f temp_dev.yml
        ( echo "cat <<EOF >final_dev.yml";
          cat kubernetes/env/dev.yaml;
          echo "EOF";
        ) >temp_dev.yml
        . temp_dev.yml
        cat final_dev.yml
        export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
        echo "$(cat final_dev.yml)"
        kubectl replace -f final_dev.yml --force
        kubectl wait --for=condition=available --timeout=120s --all deployments -A
        rm /home/ec2-user/variables || true
        rm /home/ec2-user/release || true
        rm /home/ec2-user/commitmsg || true
        echo $ct_version >/home/ec2-user/variables
        echo ${{ github.run_number }} >/home/ec2-user/release
        echo ${{ github.event.head_commit.message }} >/home/ec2-user/commitmsg
        
        
  Run-Tests:
      runs-on: dynatracedemo
      needs: Deploy-Application
      outputs:
              test_start_time: ${{ steps.set_start_time.outputs.startdate }}
              test_end_time: ${{ steps.set_end_time.outputs.enddate }}
       
      steps:     
      - name: set test start time
        id: set_start_time
        run: echo "::set-output name=startdate::$(date -d "$TIME - 5min" +"%Y-%m-%dT%H:%M:%S")"

      - name: Run JMeter Action on a test
        uses: rbhadti94/apache-jmeter-action@v0.5.0
        with:
      #    testFilePath: jmeter/basiccheck.jmx
          testFilePath: jmeter/simplenodeservice_perfcheck.jmx
          outputReportsFolder: reports/
          args: "--loglevel INFO"
        
      - name: Stress-Simulation-Cpu
        if: "contains(github.event.head_commit.message, 'faildev')"
        run: |
          sudo amazon-linux-extras install epel
          sudo yum install -y epel-release
          sudo yum install stress -y
          sudo stress --cpu 32 --vm-bytes $(awk '/MemAvailable/{printf "%d\n", $2 * 0.9;}' < /proc/meminfo)k --vm-keep -m 1 -t 150s
          
      - name: Stress-Simulation-Cpu2
        if: "contains(github.event.head_commit.message, 'faildevlong')"
        run: |
          sudo amazon-linux-extras install epel
          sudo yum install -y epel-release
          sudo yum install stress -y
          sudo stress --cpu 32 --vm-bytes $(awk '/MemAvailable/{printf "%d\n", $2 * 0.9;}' < /proc/meminfo)k --vm-keep -m 1 -t 30m       
          
      - name: Initial Deployment
        if: "contains(github.event.head_commit.message, 'first')"
        run: |
             sleep 500
          
      - name: set test end time
        id: set_end_time
        run: echo "::set-output name=enddate::$(date -d "$TIME - 0min" +"%Y-%m-%dT%H:%M:%S")"


          

  
       



